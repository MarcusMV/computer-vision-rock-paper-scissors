import random
import time
import cv2
import numpy as np
from dataclasses import dataclass, field
from keras.models import load_model

@dataclass
class RockPaperScissors:
    """
    A class representing the Rock Paper Scissors game.

    Attributes:
    - options: A list of available choices in the game.
    - maximum_time: The maximum time allowed for each round.

    Methods:
    - get_computer_choice: Returns a random choice for the computer.
    - get_user_choice: Returns the user's choice based on the prediction.
    - get_winner: Determines the winner of the game based on the choices.
    - play_game: Starts the game and handles the game logic.
    """
        
    options: list[str] = field(default_factory=lambda: [
                               'rock', 'paper', 'scissors', 'none'])
    maximum_time: int = 5

    def get_computer_choice(self):
        """
        Returns a random choice for the computer.
        """
        return random.choice(self.options[:-1])
    
    def get_user_choice(self, prediction):
        """
        Returns the user's choice based on the prediction.

        Parameters:
        - prediction: The predicted index of the user's choice generated by the model.
        """
        return self.options[prediction]

    def _get_winner(self, user_choice, computer_choice):
        """
        Determines the winner of the game based on the choices.

        Parameters:
        - user_choice: The user's choice.
        - computer_choice: The computer's choice.
        """
        if computer_choice == user_choice:
            return 'tie'
        if (computer_choice == 'rock' and user_choice == 'scissors') or \
           (computer_choice == 'paper' and user_choice == 'rock') or \
           (computer_choice == 'scissors' and user_choice == 'paper'):
            return 'computer'
        else:
            return 'user'

    def play_game(self):
        """
        Starts the game and handles the game logic.
        """
        model = load_model('keras_model.h5')
        cap = cv2.VideoCapture(0)
        data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

        computer_wins = 0
        user_wins = 0
        user_choice = None
        computer_choice = None
        winner = 'tie'

        start_time = time.time()

        while True:
            ret, frame = cap.read()
            if not ret:
                print("Failed to grab frame.")
                break  # Exit if no frame is grabbed

            resized_frame = cv2.resize(
                frame, (224, 224), interpolation=cv2.INTER_AREA)
            image_np = np.array(resized_frame)
            normalized_image = (image_np.astype(np.float32) / 127.0) - 1
            data[0] = normalized_image

            prediction = model.predict(data)
            print(prediction)

            curr_time = time.time()
            remaining_time = int(self.maximum_time - (curr_time - start_time))
            countdown_text = f"Predict In: {remaining_time}"
            cv2.putText(frame, countdown_text, (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)

            cv2.imshow('frame', frame)

            if (curr_time - start_time) >= self.maximum_time:
                pred_arr = prediction[0]
                max_index = np.where(pred_arr == np.max(pred_arr))

                user_choice = self.get_user_choice(max_index[0][0])
                computer_choice = self.get_computer_choice()
                
                if user_choice != 'none':
                    winner = self._get_winner(user_choice, computer_choice)

                    print('USER chose:', user_choice)
                    print('COMPUTER chose:', computer_choice)
                    print('WINNER:', winner)
                    if winner == 'computer':
                        computer_wins += 1
                        print(winner.upper(), 'wins this round.')
                    elif winner == 'user':
                        user_wins += 1
                        print(winner.upper(), 'wins this round.')

                else:
                    computer_choice = 'none'

                start_time = curr_time

            # On screen text
            cv2.putText(frame, f"User chose: {user_choice}", (10, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (100, 100, 255), 2)
            cv2.putText(frame, f"Computer chose: {computer_choice}", (10, 90),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (100, 100, 255), 2)
            if winner != 'tie':
                cv2.putText(frame, f"{winner.capitalize()} wins this round!", (10, 150),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (150, 50, 200), 2)
            else:
                cv2.putText(frame, "It's a tie!", (10, 150),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (150, 50, 200), 2)

            cv2.putText(frame, "Score:", (500, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)
            cv2.putText(frame, f"{user_wins}", (500, 60),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (100, 100, 255), 2)
            cv2.putText(frame, f"{computer_wins}", (500, 90),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (100, 100, 255), 2)
            cv2.imshow('frame', frame)

            if computer_wins == 3 or user_wins == 3:
                print(f'\n{winner.capitalize()} wins the best of 5!')

                computer_wins = 0
                user_wins = 0

                cv2.putText(frame, f"{winner.capitalize()} wins the best of 5!", (10, 200),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (50, 150, 255), 2)
                cv2.putText(frame, "Press any key to play again.", (10, 240),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (50, 150, 255), 2)
                cv2.imshow('frame', frame)
                cv2.waitKey(0)

            # Press Q on keyboard to exit
            if cv2.waitKey(1) & 0xFF in [ord('Q'), ord('q')]:
                break

        # After the loop release the cap object
        cap.release()

        # Destroy all the windows
        cv2.destroyAllWindows()

        return
    
# Create an instance of the game and play
game = RockPaperScissors()
game.play_game()
